/* ------------------------------------------
 * Copyright (c) 2019, Synopsys, Inc. All rights reserved.

 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:

 * 1) Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.

 * 2) Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.

 * 3) Neither the name of the Synopsys, Inc., nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   --------------------------------------------- */

/**
 * This file has excerpts from gcc libgcc/libgcov.h and gcc/gcov-io.h.
 * Which is governed by section 7 of additional permissions.
 */

#ifndef H_COVERAGE
#define H_COVERAGE

#if (__GNUC__ >= 8)
#define GCOV_COUNTERS 9U
#else
#define GCOV_COUNTERS 10U
#endif

typedef uint64_t gcov_type;

#define GCOV_TAG_FUNCTION_LENGTH  3
#define GCOV_DATA_MAGIC   (0x67636461)
#define GCOV_TAG_FUNCTION (0x01000000)
#define GCOV_TAG_COUNTER_BASE (0x01a10000)
#define GCOV_TAG_FOR_COUNTER(count) \
	(GCOV_TAG_COUNTER_BASE + ((uint32_t) (count) << 17))

#define FILE_START_INDICATOR    '*'
#define GCOV_DUMP_SEPARATOR '<'

/**Information about counters for a single function
 *
 * This data is generated by gcc during compilation and doesn't change
 *  at run-time with the exception of the values array.
 */
struct gcov_ctr_info {
	uint32_t num;           /* number of counter values for this type */
	gcov_type *values;      /* array of counter values for this type */
};

/**
 * Profiling meta data per function
 *
 * This data is generated by gcc during compilation and doesn't change
 * at run-time.
 *
 * Information about a single function.  This uses the trailing array
 * idiom. The number of counters is determined from the merge pointer
 * array in gcov_info.  The key is used to detect which of a set of
 * comdat functions was selected -- it points to the gcov_info object
 * of the object file containing the selected comdat function.
 */
struct gcov_fn_info {
	const struct gcov_info *key;    /* comdat key */
	uint32_t ident;                 /* unique ident of function */
	uint32_t lineno_checksum;       /* function lineo_checksum */
	uint32_t cfg_checksum;          /* function cfg checksum */
	struct gcov_ctr_info ctrs[0];   /* instrumented counters */
};

/** Profiling data per object file
 *
 * This data is generated by gcc during compilation and doesn't change
 * at run-time with the exception of the next pointer.
 */
struct gcov_info {
	uint32_t version;               /* Gcov version (same as GCC version) */
	struct gcov_info *next;         /* List head for a singly-linked list */
	uint32_t stamp;                 /* Uniquifying time stamp */
	const char *filename;           /* Name of the associated gcda data file */
	/* merge functions, null for unused*/
	void (*merge[GCOV_COUNTERS])(gcov_type *, uint32_t);
	uint32_t n_functions;                   /* number of instrumented functions */
	struct gcov_fn_info **functions;        /* function information */

};

void __gcov_init(struct gcov_info *info);
void __gcov_exit(void);
#endif /* H_COVERAGE */
